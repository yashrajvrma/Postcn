// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  FOLDER
  FILE
}

enum Role {
  USER
  ASSISTANT
}

model User {
  id String @id @default(uuid())

  name     String
  email    String  @unique
  password String? @db.VarChar(255)

  emailVerified Boolean @default(false)
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions   Session[]
  accounts   Account[]
  Collection Collection[]
  Message    Message[]
  MockRoute  MockRoute[]

  @@map("user")
}

model Session {
  id String @id

  expiresAt DateTime
  token     String

  ipAddress String?
  userAgent String?
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification")
}

model Collection {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  name String
  // type FileType // FOLDER | FILE

  droppable Boolean @default(true)

  parentId String?
  parent   Collection? @relation("CollectionChildren", fields: [parentId], references: [id])

  children Collection[] @relation("CollectionChildren")

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Message   Message[]
  MockRoute MockRoute[]

  @@map("collection")
}

model Message {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  content Json
  role    Role

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  MockRoute MockRoute[]

  @@map("message")
}

model MockRoute {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  method   String
  path     String
  response Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Message   Message? @relation(fields: [messageId], references: [id])
  messageId String?

  @@map("mock_route")
}
